name: Docker

on:
  schedule:
    - cron: '27 11 * * *'
  push:
    branches: [ "master" ]
    tags: [ v* ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.3.0 # v3.0.0

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: ./nice_bot/
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
  deploy:
    needs: build
    name: Deploy to VPS Server
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "Generating .env file"

          echo "# Autogenerated .env file" > .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQLPASSR_PROD }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER_PROD }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASS_PROD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME_PROD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST_PROD }}" >> .env
          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN_PROD }}" >> .env

      #- uses: actions/checkout@v4
      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT_SSH }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./docker-compose.yml,./.env"
          target: ${{ secrets.REMOTE_TARGET }}
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.PORT_SSH }}
          script: |
            cd ${{ secrets.REMOTE_TARGET }}
            docker pull ghcr.io/darkhenk13/betteruseroftheday:master
            docker compose --env-file .env -f ./docker-compose.yml up -d